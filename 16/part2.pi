import sat.
import util.

main =>
  Lines = read_file_lines(),
  Input = map(parse_line, Lines),

  ValveIndices = new_map(),
  foreach(I in 1..length(Input))
    L = Input[I],
    ValveIndices.put(L[1], I)
  end,

  Valves = new_map(),
  foreach([V,Rate,Vs] in Input)
    Valves.put(ValveIndices.get(V), {Rate, [ValveIndices.get(Destination) : Destination in Vs]}),
  end,
  println(m=Valves),
  Res = calc(Valves, ValveIndices.get("AA")).

calc(Valves, Start) = R =>
  Mins = 26,
  % do player moves, then elephant moves
  Steps = Mins*2,
  N = Valves.size,
  println(n=N),
  println(valves=Valves),

  Actions = new_array(Steps),
  Actions :: 0..N,

  % adjacency matrix + flow rates
  Adj = new_array(N,N),
  foreach(Source in 1..N)
    {Rate, Destinations} = Valves.get(Source),
    foreach(Dest in 1..N)
      Adj[Source,Dest] = cond(member(Dest, Destinations), 1, 0),
    end,
  end,

  println(adj1=Adj),
  Adjacent = new_array(N,N),
  Adjacent :: 0..1,
  Rates = new_array(N),
  foreach(Source in 1..N)
    {Rate, Destinations} = Valves.get(Source),
    Rates[Source] #= Rate,
    println(dest=Destinations),
    foreach(Dest in 1..N)
      % really not sure why I have to make a separate "real" array, then copy elements with matrix_element
      X #= Adj[Source,Dest],
      matrix_element(Adjacent,Source,Dest,X),
    end,
  end,

  println(adj=Adjacent),

  % State
  OpenValves = new_array(Steps+1,N),
  % 0 = closed, 1 = opened already
  OpenValves :: 0..1,
  foreach(I in 1..N)
    % OpenValves[1,I] #= 0,
    matrix_element(OpenValves, 1, I, 0),  % TODO: undo this bit, unnecessary
  end,

  PressureReleased = new_array(Steps+1),
  PressureReleased :: 0..10000,
  PressureReleased[1] #= 0,

  PlayerLocation = new_array(Steps+1),
  PlayerLocation :: 1..N,
  PlayerLocation[1] #= Start,
  PlayerLocation[Mins + 1] #= Start,  % elephant starts from valve AA again

  foreach(P in 0..1)
    foreach(T in 1..Mins)
      I = P*Mins + T,
      M :: 0..26,
      M #= Mins + 1 - T,
      % Actions: 0 = turn valve, 1..N = go to valve number N
      Action #= Actions[I],
      Location #= PlayerLocation[I],

      % restrict valve opening
      element(Location, OpenValves[I], IsOpened),
      IsOpened #= 1 #=> Action #!= 0,      % can't open already-open valve
      IsOpened #= 1 #=> WillBeOpen #= 1,   % open valve remains open
      Action #= 0 #=> WillBeOpen #= 1,     % actually open the valve
      % update valve state
      % element(Location, OpenValves[I+1], WillBeOpen),

      % how do I specify that all other values from the previous timestep will carry over,
      % without walking the current/future valve list and using matrix_element on both lists?
      foreach(L in 1..N)
        % without doing this, the next timestep's open valve set could just end up with any values...
        [WasOpen, OpenNext] :: 0..1,
        element(L, OpenValves[I], WasOpen),
        OpenNext #= cond(L #= Location, WillBeOpen, WasOpen),
        element(L, OpenValves[I+1], OpenNext),
      end,

      element(Location, Rates, Rate),
      % Rate #= 0 #=> Action #!= 0,             % don't open a useless valve (maybe drop this?)
      M #<= 1 #=> Action #!= 0,                        % opening valve with 1 min left is meaningless

      % movement
      NextLocation #= cond(Action #= 0, Location, Action),
      matrix_element(Adjacent, Location, NextLocation, X),
      Action #> 0 #=> X #= 1,    %  can only move to adjacent position
      PlayerLocation[I+1] #= NextLocation,

      % update pressure released
      Action #= 0 #=> PressureReleased[I+1] #= PressureReleased[I] + Rate*(M-1),
      Action #> 0 #=> PressureReleased[I+1] #= PressureReleased[I],
    end,
  end,

  println("ready"),
  TotalScore #= PressureReleased[Steps+1],
  %println(openValves=OpenValves),
  solve([ff,split,$max(TotalScore),$report(printf("TotalScore: %d\n",TotalScore))], Actions),
  println(actions2=Actions),
  println(pressure=PressureReleased),
  println(location=PlayerLocation),
  println(openValves=OpenValves),
  println(totalScore=TotalScore),
  R = TotalScore.

parse_line(S) = R =>
  [_,V,_,_,RateS,_,_,_,_|Vs] = split(S),
  Rate = split(RateS,"=").slice(2).head().split(";").head().to_int(),
  Valves = [X.split(",").head() : X in Vs],
  println(parsed=[V,Rate,Valves]),

  R = [V,Rate,Valves].
