import planner.
import util.

main =>
  Lines = read_file_lines(),
  Input = map(parse_line, Lines),

  ValveIndices = new_map(),
  foreach(I in 1..length(Input))
    L = Input[I],
    ValveIndices.put(L[1], I)
  end,

  Valves = new_map(),
  foreach([V,Rate,Vs] in Input)
    Valves.put(ValveIndices.get(V), {Rate, [ValveIndices.get(Destination) : Destination in Vs]}),
  end,
  println(m=Valves),
  % can't seem to pass variables to the planner predicates...
  get_global_map(g1).put(valves,Valves),
  get_global_map(g1).put(start_valve,ValveIndices.get("AA")),
  get_global_map(g1).put(rates,[V[2] : V in Input]),

  % initial state
  S0 = {0, 26, 0, [0 : _ in 1..Valves.size()-1], ValveIndices.get("AA")},
  println(s0=S0),
  best_plan_unbounded(S0,Plan),
  writeln(Plan),
  println("Intriguing...").

final(S) =>
  println(final_check=S),
  S[1] == 1 && S[2] <= 1.
% turn a valve
action({P2, Mins, Released, OpenedValves, Here}, S1, Action, Cost) ?=>
  V = get_global_map(g1).get(valves).get(Here),
  Flow = V[1],

  % println(flow1=Flow),
  Mins > 1,
  % println(ok=1),
  Action = 0,
  OpenedValves[Here] = 0,
  Released2 = Released + (Mins - 1)*Flow,
  S1 = {P2, Mins - 1, Released2, [cond(I == Here, 1, OpenedValves[Here]) : I in 1..OpenedValves.length()-1], Here},
  Cost = 0. %-(Flow * (Mins - 1)).

% move
action({P2, Mins, Released, OpenedValves, Here}, S1, Action, Cost) ?=>
  V = get_global_map(g1).get(valves).get(Here),
  ReachableValves = V[2],

  % println(flow2),
  Mins > 1,
  member(Action, 1..OpenedValves.len()-1),
  % println(ok=2),
  % OpenedValves[Here] = 0, could optimise this and refuse to allow moving on from unturned valve?
  member(Action, ReachableValves),

  S1 = {P2, Mins - 1, Released, OpenedValves, Action},
  Cost = 0.

% P1 runs out of turns and passes over to P2
action({P2, Mins, Released, OpenedValves, Here}, S1, Action, Cost) ?=>
  Start = get_global_map(g1).get(start_valve),

  Mins <= 1,
  S1 = {1, 26, OpenedValves, Start},
  Cost = 0.

parse_line(S) = R =>
  [_,V,_,_,RateS,_,_,_,_|Vs] = split(S),
  Rate = split(RateS,"=").slice(2).head().split(";").head().to_int(),
  Valves = [X.split(",").head() : X in Vs],
  println(parsed=[V,Rate,Valves]),

  R = [V,Rate,Valves].
